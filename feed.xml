<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jez.io/talks/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jez.io/talks/" rel="alternate" type="text/html" /><updated>2025-08-07T21:10:38-07:00</updated><id>https://jez.io/talks/feed.xml</id><title type="html">Talks</title><subtitle>A repository of talks I&apos;ve given</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">Past, Present, and Future of Sorbet Type Syntax</title><link href="https://jez.io/talks/history-of-sorbet-syntax/" rel="alternate" type="text/html" title="Past, Present, and Future of Sorbet Type Syntax" /><published>2025-04-23T00:00:00-07:00</published><updated>2025-04-23T00:00:00-07:00</updated><id>https://jez.io/talks/history-of-sorbet-syntax</id><content type="html" xml:base="https://jez.io/talks/history-of-sorbet-syntax/"><![CDATA[<p>I gave a talk at the SF Bay Area Ruby Meetup in April 2025 about the
history of Sorbet’s type syntax. The abstract of the talk:</p>
<blockquote>
<p>No one loves Sorbet’s type syntax, but it’s still the only way to
annotate types alongside Ruby source code (comments not included). By
contrast, RBS annotations live in separate files, making them difficult
to use for anyone enthusiastic to adopt type—people turn to Sorbet
largely in spite of its syntax.</p>
<p>Why does <code>sig</code> take a block? Why do some types use
<code>T::</code> and some types use <code>T.</code>? Why do Sorbet type
annotations feel so verbose? How did it end up like this?</p>
<p>We’ll answer these questions and more. Starting from before Sorbet
existed, we’ll proceed through the history and circumstances which
influenced Sorbet’s type syntax, discussing the principles guiding the
design. We’ll end with some ideas for the future, both for Sorbet and
the wider typed Ruby ecosystem.</p>
</blockquote>
<p>Unfortunately, the audio quality in the recording below is
particularly poor. If you happen to work at Stripe, I gave this same
talk as an internal “lunch and learn” tech talk that you should be able
to find from the internal Tech Talks page, which has better audio
quality.</p>
<p>I also turned my script for the talk into a blog post:</p>
<p>→ <a href="https://blog.jez.io/history-of-sorbet-syntax/">Past,
Present, and Future of Sorbet Type Syntax</a></p>
<p>Otherwise, I hope to be able to re-present this talk to get something
with better production quality. If you’d like me to present this talk at
your event, please reach out.</p>
<ul>
<li><a
href="https://youtu.be/eqLbYCCCRO0?si=_V6Ik9P6-JHafGWe&amp;t=3504">Video</a></li>
<li><a
href="https://sorbet.run/talks/SFRubyApril2025/#/">Slides</a></li>
<li><a href="https://lu.ma/9uabe94u">Talk page</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[I gave a talk at the SF Bay Area Ruby Meetup in April 2025 about the history of Sorbet’s type syntax. The abstract of the talk:]]></summary></entry><entry><title type="html">Refactoring Stubborn, Legacy Codebases</title><link href="https://jez.io/talks/refactoring-stubborn-legacy-codebases/" rel="alternate" type="text/html" title="Refactoring Stubborn, Legacy Codebases" /><published>2024-11-19T00:00:00-08:00</published><updated>2024-11-19T00:00:00-08:00</updated><id>https://jez.io/talks/refactoring-stubborn-legacy-codebases</id><content type="html" xml:base="https://jez.io/talks/refactoring-stubborn-legacy-codebases/"><![CDATA[<p>I gave a talk together with <a href="https://gdritter.com/">G. D.
Ritter</a> at QCon SF 2024, relating to work we’ve done together at <a
href="https://jez.io/thoughts/on-stripe/">Stripe</a>.</p>
<p>The abstract of the talk:</p>
<blockquote>
<p>At Stripe, we manage a codebase of tens of millions of lines of Ruby.
Like any large codebase, people have no shortage of complaints about it,
and it’s our job to fix those complaints. Fixing them means refactoring
the problems away, and over the years we’ve learned what it takes for
these sweeping refactors to be successful: it comes down to leverage and
ratcheting.</p>
<p>We’ll use two examples to talk about what it means to have leverage
over a codebase and how to ratchet increment progress: how we built a
Ruby type checker to make developers happier, and how we’re building a
Ruby package system to introduce modularity. The ideas will be
high-level, and apply to basically any team that wants to run a
migration in a large, stubborn codebase.</p>
</blockquote>
<ul>
<li><a
href="https://www.infoq.com/presentations/refactoring-legacy-codebases/">Video</a></li>
<li><a href="https://sorbet.run/talks/QCon2024/">Slides</a></li>
<li><a
href="https://qconsf.com/presentation/nov2024/refactoring-stubborn-legacy-codebases">Talk
page</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[I gave a talk together with G. D. Ritter at QCon SF 2024, relating to work we’ve done together at Stripe.]]></summary></entry><entry><title type="html">Types will win in the end</title><link href="https://jez.io/talks/types-will-win-in-the-end/" rel="alternate" type="text/html" title="Types will win in the end" /><published>2023-07-05T00:00:00-07:00</published><updated>2023-07-05T00:00:00-07:00</updated><id>https://jez.io/talks/types-will-win-in-the-end</id><content type="html" xml:base="https://jez.io/talks/types-will-win-in-the-end/"><![CDATA[<p>I joined the hosts of <a href="https://changelog.com/">the Changelog
podcast</a> to talk about working on Sorbet at Stripe.</p>
<p>The episode summary:</p>
<blockquote>
<p>This week we’re talking about type checking with Jake Zimmerman. Jake
is one of the leads at Stripe working on Sorbet — an open source project
that does Type checking in Ruby and runs over Stripe’s entire Ruby
codebase. As of May of 2022 Stripe’s codebase was over 15 million lines
of code spread across 150,000 files. If you think you have a bigger Ruby
codebase, Jake is down to go byte-for-byte to see who wins. Jake shares
tons of wisdom and more importantly he shares why he thinks types will
win in the end.</p>
</blockquote>
<ul>
<li><a href="https://changelog.com/podcast/548">Episode page, including
transcript</a></li>
<li>In various podcast ecosystems:
<ul>
<li><a
href="https://podcasts.apple.com/us/podcast/types-will-win-in-the-end-interview/id341623264?i=1000621075228">Apple
Podcasts</a></li>
<li><a
href="https://open.spotify.com/episode/6T7yJOxcTUOH8DLJZ46v3C?si=cd5628a7996c4778">Spotify</a></li>
<li><a
href="https://www.youtube.com/watch?v=Xo0qck2B6ME">YouTube</a></li>
<li>find more on the episode page</li>
</ul></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[I joined the hosts of the Changelog podcast to talk about working on Sorbet at Stripe.]]></summary></entry><entry><title type="html">Compiling Ruby to Native Code with Sorbet and LLVM</title><link href="https://jez.io/talks/sorbet-rubyconf-2021/" rel="alternate" type="text/html" title="Compiling Ruby to Native Code with Sorbet and LLVM" /><published>2021-11-10T00:00:00-08:00</published><updated>2021-11-10T00:00:00-08:00</updated><id>https://jez.io/talks/sorbet-rubyconf-2021</id><content type="html" xml:base="https://jez.io/talks/sorbet-rubyconf-2021/"><![CDATA[<p>At <a href="https://jez.io/thoughts/on-stripe/">Stripe</a> I spent
two years working on the <a
href="https://github.com/sorbet/sorbet/tree/master/compiler">Sorbet
Compiler</a>, an ahead-of-time compiler for Ruby powered by <a
href="https://sorbet.org">Sorbet</a>, the type checker for Ruby. Along
with Trevor Elliott, I spoke about the Sorbet Compiler at RubyConf 2021
in Denver, Colorado.</p>
<p>The abstract of the talk:</p>
<blockquote>
<p>At Stripe, “make it faster!” is one of our most requested features,
but we don’t want to have to pause work on other features to get speed.
Instead, we’ve built an ahead-of-time compiler for Ruby, powered by
Sorbet and LLVM, focusing on improving latency in Stripe’s multi-million
line Ruby code base.</p>
<p>In this talk, we’ll cover why we built it, how it works, and share
preliminary results from compiling Stripe’s production Ruby code. It’s
not quite ready for prime time yet, but we’re interested in sharing our
approach and getting early feedback on the design.</p>
<p>
</p>
</blockquote>
<ul>
<li><a href="https://www.youtube.com/watch?v=BH8S1htcHXY">Video</a></li>
<li><a href="https://sorbet.run/talks/RubyConf2021/">Slides</a></li>
<li><a href="https://rubyconf.org/program/sessions#session-1171">Talk
page</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[At Stripe I spent two years working on the Sorbet Compiler, an ahead-of-time compiler for Ruby powered by Sorbet, the type checker for Ruby. Along with Trevor Elliott, I spoke about the Sorbet Compiler at RubyConf 2021 in Denver, Colorado.]]></summary></entry><entry><title type="html">Sorbet: A type checker for Ruby 3 you can use today!</title><link href="https://jez.io/talks/sorbet-rubyconf-2019/" rel="alternate" type="text/html" title="Sorbet: A type checker for Ruby 3 you can use today!" /><published>2019-11-18T22:00:00-08:00</published><updated>2019-11-18T22:00:00-08:00</updated><id>https://jez.io/talks/sorbet-rubyconf-2019</id><content type="html" xml:base="https://jez.io/talks/sorbet-rubyconf-2019/"><![CDATA[<p>At <a href="https://jez.io/thoughts/on-stripe/">Stripe</a> I’ve been
working on <a href="https://sorbet.org">Sorbet</a>, a type checker for
Ruby. Along with Dmitry Petrashko, I spoke about Sorbet at RubyConf 2019
in Nashville, Tennessee.</p>
<p>The abstract of the talk:</p>
<blockquote>
<p>In June we open-sourced Sorbet, a fast, powerful type checker
designed for Ruby. In the 6 months since, tons of things have improved!
We’ve built quality editor tools like jump-to-def and seen many
contributions from a growing community. Within Stripe, we’ve used Sorbet
to drive code quality via measurable, concrete indicators.</p>
<p>We’ll share these improvements and give an update on our
collaboration with Matz and the Ruby 3 Types working group. Suitable for
anyone using Ruby—no familiarity with Sorbet needed! Come follow in the
footsteps of the many companies already using Sorbet.</p>
<p>
</p>
</blockquote>
<ul>
<li><a href="https://www.youtube.com/watch?v=jielBIZ40mw">Video</a></li>
<li><a href="https://sorbet.run/talks/RubyConf2019/#/">Slides</a></li>
<li><a href="https://rubyconf.org/program#session-908">Talk
page</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[At Stripe I’ve been working on Sorbet, a type checker for Ruby. Along with Dmitry Petrashko, I spoke about Sorbet at RubyConf 2019 in Nashville, Tennessee.]]></summary></entry><entry><title type="html">State of Sorbet: A Type Checker for Ruby</title><link href="https://jez.io/talks/state-of-sorbet-2019/" rel="alternate" type="text/html" title="State of Sorbet: A Type Checker for Ruby" /><published>2019-04-19T00:00:00-07:00</published><updated>2019-04-19T00:00:00-07:00</updated><id>https://jez.io/talks/state-of-sorbet-2019</id><content type="html" xml:base="https://jez.io/talks/state-of-sorbet-2019/"><![CDATA[<p>At <a href="https://jez.io/thoughts/on-stripe/">Stripe</a> I’ve been
working on <a href="https://sorbet.org">Sorbet</a>, a type checker for
Ruby. Along with Paul Tarjan, I presented a progress update at RubyKaigi
2019 in Fukuoka, Japan about what we worked on in 2018 and what we’d be
working on in 2019.</p>
<p>The talk breaks down into a couple of sections:</p>
<ul>
<li>A brief description of Stripe and what we work on</li>
<li>The process of adopting Sorbet at Stripe</li>
<li>The editor tools that we’ve built on top of Sorbet</li>
<li>Our plan for what Sorbet will look like when open sourced</li>
</ul>
<p>The abstract of the talk:</p>
<blockquote>
<p>We have developed a type system for Ruby at Stripe with a goal of
helping developers understand code better, write code with more
confidence, and detect &amp; prevent significant classes of bugs.</p>
<p>This talk shares experience of Stripe successfully adopting Sorbet in
our codebase which had millions lines of code that were written before
the typechecker had been conceived. The talk will describe:</p>
<ul>
<li>the process used to add typing to existing code;</li>
<li>many tools developed to support this process;</li>
<li>impact of this type system on safety and productivity at
Stripe.</li>
</ul>
<p>We also have some exciting announcements!</p>
<p>The talk does not require any previous knowledge of types and should
be accessible to a broad audience.</p>
<p>
</p>
</blockquote>
<p>A definite plus of giving this talk was getting to travel to Japan in
April!</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=odmlf_ezsBo">Video</a></li>
<li><a href="https://sorbet.run/talks/RubyKaigi2019/#/">Slides</a></li>
<li><a
href="https://rubykaigi.org/2019/presentations/jez.html#apr19">Talk
page</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[At Stripe I’ve been working on Sorbet, a type checker for Ruby. Along with Paul Tarjan, I presented a progress update at RubyKaigi 2019 in Fukuoka, Japan about what we worked on in 2018 and what we’d be working on in 2019.]]></summary></entry><entry><title type="html">Union Types in Flow &amp;amp; Reason</title><link href="https://jez.io/talks/union-types-flow-reason/" rel="alternate" type="text/html" title="Union Types in Flow &amp;amp; Reason" /><published>2018-05-17T00:00:00-07:00</published><updated>2018-05-17T00:00:00-07:00</updated><id>https://jez.io/talks/union-types-flow-reason</id><content type="html" xml:base="https://jez.io/talks/union-types-flow-reason/"><![CDATA[<p>Union types are powerful yet often overlooked. At work, I’d noticed
that using union types in Flow incurred a creeping cost in terms of a
bloated bundle size.</p>
<p>In this talk, I explore why that’s the case. We starts with a problem
which union types can solve, flesh out the problem to motivate why union
types are definitely the solution, then examine the resulting cost of
introducing them. In the end, we compare Flow to other compile-to-JS
languages on the basis of how they represent union types in the compiled
output. I’m especially excited about Reason, so we talk about it the
most.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=PAtZCvSmOhw">Video</a></li>
<li><a
href="../slides/union-types-flow-reason/union-types-flow-reason.pdf">Slides</a></li>
<li><a href="https://blog.jez.io/union-types-flow-reason/">Blog
post</a></li>
<li><a
href="https://github.com/jez/talks/tree/master/slides/union-types-flow-reason">Markdown
sources for slides (GitHub)</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[Union types are powerful yet often overlooked. At work, I’d noticed that using union types in Flow incurred a creeping cost in terms of a bloated bundle size.]]></summary></entry><entry><title type="html">Writing at the Command Line</title><link href="https://jez.io/talks/writing-at-the-command-line/" rel="alternate" type="text/html" title="Writing at the Command Line" /><published>2016-11-19T21:00:00-08:00</published><updated>2016-11-19T21:00:00-08:00</updated><id>https://jez.io/talks/writing-at-the-command-line</id><content type="html" xml:base="https://jez.io/talks/writing-at-the-command-line/"><![CDATA[<p>One of my favorite quotes is this one by Manuel Blum:</p>
<blockquote>
<p>You are all computer scientists.<br> You know what FINITE AUTOMATA
can do.<br> You know what TURING MACHINES can do.<br> For example,
Finite Automata can add but not multiply.<br> Turing Machines can
compute any computable function.<br> Turing machines are incredibly more
powerful than Finite Automata.<br> Yet the only difference between a FA
and a TM is that<br> the TM, unlike the FA, has paper and pencil.<br>
Think about it.<br> It tells you something about the power of
writing.<br> Without writing, you are reduced to a finite automaton.<br>
With writing you have the extraordinary power of a Turing machine.</p>
<p>— Manuel Blum, <em>Advice to a Beginning Graduate Student</em></p>
</blockquote>
<p>Writing is a critically important skill for various reasons. Once
you’ve convinced yourself <em>to write</em>, the next question becomes
<em>how to write</em>. Writing at the Command Line introduces a handful
of workflows, tools, and suggestions for writing in plain text, with a
particular emphasis on Markdown.</p>
<ul>
<li><a href="../slides/writing-cli/writing-cli.pdf">Writing at the
Command Line</a></li>
<li><a
href="https://github.com/jez/talks/tree/master/slides/writing-cli">Markdown
sources (GitHub)</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[One of my favorite quotes is this one by Manuel Blum:]]></summary></entry><entry><title type="html">Crafting Well-Designed Sites</title><link href="https://jez.io/talks/crafting-well-designed-sites/" rel="alternate" type="text/html" title="Crafting Well-Designed Sites" /><published>2016-11-05T21:00:00-07:00</published><updated>2016-11-05T21:00:00-07:00</updated><id>https://jez.io/talks/crafting-well-designed-sites</id><content type="html" xml:base="https://jez.io/talks/crafting-well-designed-sites/"><![CDATA[<p>My interests varied wildly over my tenure at CMU. Towards the end of
my time there, I became increasingly interested in design, specifically
typography and information hierarchy. As such, for the Fall 2016 Web Dev
Weekend (see also: <a href="/talks/frontend-javascript-primer/">Frontend
JavaScript Primer</a>), I held another workshop-style talk on using
typography and information hierarchy titled “Crafting Well-Designed
Sites.”</p>
<p>It was split into two halves: a lecture portion where I introduced
actionable rules for improving the design of print and digital text,
followed by an interactive “design critique” where the participants
sketched their ideas and we discussed what we liked and didn’t like
about various designs.</p>
<ul>
<li><a
href="../slides/crafting-well-designed-sites/crafting-well-designed-sites.pdf">Crafting
Well-Designed Sites</a></li>
<li><a
href="https://github.com/jez/talks/tree/master/slides/crafting-well-designed-sites">Markdown
sources (GitHub)</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[My interests varied wildly over my tenure at CMU. Towards the end of my time there, I became increasingly interested in design, specifically typography and information hierarchy. As such, for the Fall 2016 Web Dev Weekend (see also: Frontend JavaScript Primer), I held another workshop-style talk on using typography and information hierarchy titled “Crafting Well-Designed Sites.”]]></summary></entry><entry><title type="html">Oneliners</title><link href="https://jez.io/talks/oneliners/" rel="alternate" type="text/html" title="Oneliners" /><published>2016-10-26T00:00:00-07:00</published><updated>2016-10-26T00:00:00-07:00</updated><id>https://jez.io/talks/oneliners</id><content type="html" xml:base="https://jez.io/talks/oneliners/"><![CDATA[<p>Learning to write bash oneliners is skill that pays incredible
dividends over the course of career in software engineering or computer
science. While individual oneliners usually tend to take on a life of
their own, a few principles apply to nearly every oneliner.</p>
<p>I gave this talk at CMU as a part of the course 15-131 Great
Practical Ideas for Computer Scientists. Since it was for a lecture, it
splits its time beteween reviewing old material and introducing new
material. Topics introduced include shell IO redirection, crafting bash
oneliners iteratively, and some common tools that compose well in
oneliners.</p>
<ul>
<li><a href="../slides/oneliners/oneliners.pdf">Oneliners</a></li>
<li><a
href="https://github.com/jez/talks/tree/master/slides/oneliners">Markdown
sources (GitHub)</a></li>
</ul>]]></content><author><name>Jake Zimmerman</name></author><summary type="html"><![CDATA[Learning to write bash oneliners is skill that pays incredible dividends over the course of career in software engineering or computer science. While individual oneliners usually tend to take on a life of their own, a few principles apply to nearly every oneliner.]]></summary></entry></feed>